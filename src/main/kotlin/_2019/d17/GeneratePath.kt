package _2019.d17

import util.*

val maze = "#######..................................\n" +
        "#.....#..................................\n" +
        "#.....#..................................\n" +
        "#.....#..................................\n" +
        "#.....#..................................\n" +
        "#.....#..................................\n" +
        "#.....#.......................#####......\n" +
        "#.....#.......................#...#......\n" +
        "#.....#.......................#...#......\n" +
        "#.....#.......................#...#......\n" +
        "###########.................###########..\n" +
        "......#...#.................#.#...#...#..\n" +
        "......#######...........#######...#...#..\n" +
        "..........#.#...........#...#.....#...#..\n" +
        "..........#.#...........#...#.....#...#..\n" +
        "..........#.#...........#...#.....#...#..\n" +
        "..........#######.......#.#############..\n" +
        "............#...#.......#.#.#.....#......\n" +
        "............#############.#.#.....######^\n" +
        "................#.........#.#............\n" +
        "................#.....#######............\n" +
        "................#.....#...#..............\n" +
        "................#...#######..............\n" +
        "................#...#.#..................\n" +
        "................#...#.#..................\n" +
        "................#...#.#..................\n" +
        "..........#############..................\n" +
        "..........#.....#...#....................\n" +
        "..........#.....#####....................\n" +
        "..........#..............................\n" +
        "..........#######........................\n" +
        "................#........................\n" +
        "................#.#......................\n" +
        "................#.#......................\n" +
        "................#.#......................\n" +
        "................#.#......................\n" +
        "................#######..................\n" +
        "..................#...#..................\n" +
        "..................###########............\n" +
        "......................#.....#............\n" +
        "......................#.....#............\n" +
        "......................#.....#............\n" +
        "......................#.....#............\n" +
        "......................#.....#............\n" +
        "......................#.....#............\n" +
        "......................#.....#............\n" +
        "......................#.....#............\n" +
        "......................#.....#............\n" +
        "......................#######............\n"

val maze2 = "#######...#####\n" +
        "#.....#...#...#\n" +
        "#.....#...#...#\n" +
        "......#...#...#\n" +
        "......#...###.#\n" +
        "......#.....#.#\n" +
        "^########...#.#\n" +
        "......#.#...#.#\n" +
        "......#########\n" +
        "........#...#..\n" +
        "....#########..\n" +
        "....#...#......\n" +
        "....#...#......\n" +
        "....#...#......\n" +
        "....#####......"

fun getPath(input: String, start: Direction) {
    val matrix: Matrix<Char> = matrixFromString(input, '.') { it }
    var pos = matrix.points().first { matrix[it.y.toInt()][it.x.toInt()] == '^' }
    var dir = start
    var cpt = 0

    if (start == Direction.LEFT) print("L,")
    else print("R,")

    while (true) {
        if ((pos + dir).outOfMap(matrix) || matrix[pos + dir] == '.') {
            if ((pos+dir.right()).inMap(matrix) && matrix[pos + dir.right()] == '#') {
                print("$cpt,R,")
                dir = dir.right()
            } else {
                if ((pos+dir.left()).inMap(matrix) &&matrix[pos + dir.left()] == '#') {
                    print("$cpt,L,")
                    dir = dir.left()
                } else {
                    break
                }
            }
            cpt = 0
        } else {
            cpt++
            pos += dir
        }
    }
    println(cpt)
}

fun main() {
    getPath(maze, Direction.LEFT)
    getPath(maze2, Direction.RIGHT)
}
/*
M = "L,6,R,12,L,4,L,6,R,6,L,6,R,12,R,6,L,6,R,12,L,6,L,10,L,10,R,6,L,6,R,12,L,4,L,6,R,6,L,6,R,12,L,6,L,10,L,10,R,6,L,6,R,12,L,4,L,6,R,6,L,6,R,12,L,6,L,10,L,10,R,6"
A = "L,6,L,10,L,10,R,6"
B = "L,6,R,12,L,4,L,6"
C = "R,6,L,6,R,12"
P = "L,6,L,10,L,10,R,6"
P = "B, C, C, A, B, C, A, B, C, A"
*/